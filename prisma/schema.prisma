// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Client {
  id            String        @id @default(cuid())
  type          ClientType    @default(MERCHANT)
  name          String
  email         String        @unique
  transactions  Transaction[]
  customers     Customer[]
  subscriptions Subscription[]
  payouts       Payout[]
  commissions   Commission[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
}

model Customer {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  transactions  Transaction[]
  client        Client         @relation(fields: [clientId], references: [id])
  clientId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
}

model Transaction {
  id            String         @id @default(cuid())
  amount        Float
  currency      String
  status        TransactionStatus
  customer      Customer       @relation(fields: [customerId], references: [id])
  customerId    String
  client        Client         @relation(fields: [clientId], references: [id])
  clientId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  commissions   Commission[]
}

model Subscription {
  id          String       @id @default(cuid())
  name        String
  price       Float
  currency    String
  client      Client       @relation(fields: [clientId], references: [id])
  clientId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
}

model Payout {
  id          String    @id @default(cuid())
  amount      Float
  currency    String
  status      PayoutStatus
  date        DateTime
  clientId    String
  client      Client    @relation(fields: [clientId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Commission {
  id            String         @id @default(cuid())
  amount        Float
  currency      String
  transactionId String
  transaction   Transaction    @relation(fields: [transactionId], references: [id])
  clientId      String
  client        Client         @relation(fields: [clientId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
}


enum PayoutStatus {
  PENDING
  PAID
  CANCELLED
}

enum ClientType {
  AGENT
  MERCHANT
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}